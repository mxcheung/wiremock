<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<!-- mvn clean test => Creates code coverage report for unit tests mvn clean 
		verify -P unit-tests => Creates code coverage report for unit tests and fails 
		if does not meet coverage ratios mvn clean verify -P integration-tests => 
		Creates code coverage report for unit tests and fails if does not meet coverage 
		ratios mvn clean verify -P all-tests => Creates code coverage reports for 
		unit and integration tests and fails if does not meet coverage ratios) mvn 
		clean package -P no-tests => Does not execute tests and creates the distributable 
		mvn clean verify -P all-tests checkstyle:check => runs all tests, checkstyle 
		and packages -->
	<modelVersion>4.0.0</modelVersion>
	<groupId>au.com.maxcheung</groupId>
	<artifactId>wiremock-service</artifactId>
	<version>${revision}${changelist}</version>
	<packaging>war</packaging>
	<name>wiremock-service</name>
	<description>Wiremock Micro Service</description>

	<properties>
		<revision>1.0.0</revision>
		<changelist>-SNAPSHOT</changelist>

		<!-- Default Profile and Test Execution Properties. Dev profile executing 
			only unit tests. -->
		<build.profile.id>dev</build.profile.id>
		<skip.integration.tests>true</skip.integration.tests>
		<skip.unit.tests>false</skip.unit.tests>

		<!-- Code coverage properties -->
		<coverage.line.ratio>0.90</coverage.line.ratio>
		<coverage.branch.ratio>0.90</coverage.branch.ratio>
		<coverage.complexity.ratio>0.90</coverage.complexity.ratio>

		<!-- Java Version source/target -->
		<jdk.source.version>1.8</jdk.source.version>
		<jdk.target.version>1.8</jdk.target.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

		<!-- Maven plugin versions -->
		<plugin.maven.compiler>3.6.1</plugin.maven.compiler>
		<plugin.maven.resources>3.0.2</plugin.maven.resources>
		<plugin.maven.surefire>2.20</plugin.maven.surefire>
		<plugin.maven.failsafe>2.20</plugin.maven.failsafe>
		<plugin.maven.war>3.0.0</plugin.maven.war>

		<plugin.build.helper>3.0.0</plugin.build.helper>
		<plugin.jacoco>0.7.9</plugin.jacoco>
		<plugin.maven.checkstyle>2.17</plugin.maven.checkstyle>
		<plugin.puppycrawl.checkstyle>8.1</plugin.puppycrawl.checkstyle>
		<plugin.springframework.boot>1.5.6.RELEASE</plugin.springframework.boot>

		<!-- Jacoco Properties -->
		<jacoco.execution.data.file>${project.build.directory}/jacoco.exec</jacoco.execution.data.file>

		<!-- Dependency Library Versions -->
		<spring.cloud.version>Dalston.SR2</spring.cloud.version>
		<spring.cloud.contract.version>1.1.3.RELEASE</spring.cloud.contract.version>
		<shedlock.version>0.16.0</shedlock.version>
		<mssql.jdbc.version>6.2.1.jre8</mssql.jdbc.version>

		<!-- Test Dependency Library Versions -->
		<junit-version>4.12</junit-version>
		<rest.assured.version>3.0.3</rest.assured.version>
		<wiremock.version>2.8.0</wiremock.version>

	</properties>

	<profiles>
		<profile>
			<id>no-tests</id>
			<properties>
				<!-- NO tests are run. -->
				<skip.integration.tests>true</skip.integration.tests>
				<skip.unit.tests>true</skip.unit.tests>
			</properties>
		</profile>
		<profile>
			<id>all-tests</id>
			<properties>
				<!-- All tests are run. -->
				<skip.integration.tests>false</skip.integration.tests>
				<skip.unit.tests>false</skip.unit.tests>
			</properties>
		</profile>
		<profile>
			<id>unit-tests</id>
			<properties>
				<!-- Only integration tests are run. -->
				<skip.integration.tests>true</skip.integration.tests>
				<skip.unit.tests>false</skip.unit.tests>
			</properties>
		</profile>
		<profile>
			<id>integration-tests</id>
			<properties>
				<!-- Only integration tests are run. -->
				<skip.integration.tests>false</skip.integration.tests>
				<skip.unit.tests>true</skip.unit.tests>
			</properties>
		</profile>
	</profiles>

	<!-- Inherit defaults from spring boot. -->
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.5.10.RELEASE</version>
	</parent>

	<build>
		<plugins>

			<!-- Checkstyle plugin -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>${plugin.maven.checkstyle}</version>
				<configuration>
					<configLocation>config/checkstyle/checkstyle.xml</configLocation>
					<suppressionsLocation>config/checkstyle/checkstyle-suppressions.xml</suppressionsLocation>
					<suppressionsFileExpression>checkstyle.suppressions.file</suppressionsFileExpression>
				</configuration>
			</plugin>

			<!-- Need to add integration test folders to build -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>${plugin.build.helper}</version>
				<executions>
					<!-- States that the plugin's add-test-source goal is executed at generate-test-sources 
						phase. -->
					<execution>
						<id>add-integration-test-sources</id>
						<phase>generate-test-sources</phase>
						<goals>
							<goal>add-test-source</goal>
						</goals>
						<configuration>
							<!-- Configures the source directory of integration tests. -->
							<sources>
								<source>src/integration-test/java</source>
							</sources>
						</configuration>
					</execution>
					<execution>
						<id>add-integration-test-resources</id>
						<phase>generate-test-resources</phase>
						<goals>
							<goal>add-test-resource</goal>
						</goals>
						<configuration>
							<!-- Configures the resource directory of our integration tests -->
							<resources>
								<resource>
									<filtering>true</filtering>
									<directory>src/integration-test/resources</directory>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>${plugin.maven.war}</version>
			</plugin>

			<!-- Compiles java sources -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${plugin.maven.compiler}</version>
				<configuration>
					<source>${jdk.source.version}</source>
					<target>${jdk.target.version}</target>
					<encoding>${project.build.sourceEncoding}</encoding>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>${plugin.maven.resources}</version>
				<configuration>
					<encoding>${project.build.sourceEncoding}</encoding>
				</configuration>
			</plugin>

			<!-- Sprig boot plugin to enable to build Spring Boot App as WAR -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<version>${plugin.springframework.boot}</version>
				<configuration>
					<mainClass>${spring.boot.main.class}</mainClass>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${plugin.jacoco}</version>
				<executions>
					<execution>
						<id>prepare</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<destFile>${jacoco.execution.data.file}</destFile>
							<!-- Sets the name of the property containing the settings for JaCoCo 
								runtime agent. -->
							<propertyName>surefireArgLine</propertyName>
						</configuration>
					</execution>
					<!-- Prepares the property pointing to the JaCoCo runtime agent which 
						is passed as VM argument when Maven the Surefire plugin is executed. -->

					<!-- Ensures that the code coverage report for unit tests is created 
						after unit tests have been run. -->
					<execution>
						<id>post-unit-test</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<dataFile>${jacoco.execution.data.file}</dataFile>
							<!-- Sets the output directory for the code coverage report. -->
							<outputDirectory>${project.reporting.outputDirectory}/jacoco</outputDirectory>
						</configuration>
					</execution>
					<!-- Prepares the property pointing to the JaCoCo runtime agent which 
						is passed as VM argument when Maven the Failsafe plugin is executed. -->
					<execution>
						<id>pre-integration-test</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<destFile>${jacoco.execution.data.file}</destFile>
							<!-- Sets the name of the property containing the settings for JaCoCo 
								runtime agent. -->
							<propertyName>failsafeArgLine</propertyName>
						</configuration>
					</execution>
					<!-- Ensures that the code coverage report for integration tests after 
						integration tests have been run. -->
					<execution>
						<id>post-integration-test</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<dataFile>${jacoco.execution.data.file}</dataFile>
							<!-- Sets the output directory for the code coverage report. -->
							<outputDirectory>${project.reporting.outputDirectory}/jacoco</outputDirectory>
						</configuration>
					</execution>
					<!-- Code coverage must pass a minimum for the build to be successful. -->
					<execution>
						<id>check</id>
						<goals>
							<goal>check</goal>
						</goals>
						<configuration>
							<destFile>${jacoco.execution.data.file}</destFile>
							<rules>
								<!-- All classes must have 80% line and branch coverage . Note we 
									use 2 d.p so that we get can any check failure messages reported to 2 d.p -->
								<rule>
									<element>BUNDLE</element>
									<limits>
										<limit>
											<counter>LINE</counter>
											<value>COVEREDRATIO</value>
											<minimum>${coverage.line.ratio}</minimum>
										</limit>
										<limit>
											<counter>BRANCH</counter>
											<value>COVEREDRATIO</value>
											<minimum>${coverage.branch.ratio}</minimum>
										</limit>
										<limit>
											<counter>COMPLEXITY</counter>
											<value>COVEREDRATIO</value>
											<minimum>${coverage.complexity.ratio}</minimum>
										</limit>
									</limits>
									<excludes>
										<exclude>**/*Test.java</exclude>
										<exclude>**/*IT.java</exclude>
									</excludes>
								</rule>
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Runs unit tests in an isolated classloader. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${plugin.maven.surefire}</version>
				<configuration>
					<!-- Sets the VM argument line used when unit tests are run. -->
					<argLine>${surefireArgLine}</argLine>
					<!-- Skips unit tests if the value of skip.unit.tests property is true -->
					<skipTests>${skip.unit.tests}</skipTests>
					<!-- Excludes integration tests when unit tests are run. -->
					<excludes>
						<exclude>**/*IT.java</exclude>
					</excludes>
				</configuration>
			</plugin>

			<!-- Runs the integration tests in an isolated container. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>${plugin.maven.failsafe}</version>
				<executions>
					<!-- Ensures that both integration-test and verify goals of the Failsafe 
						Maven plugin are executed. -->
					<execution>
						<configuration>
							<!-- Sets the VM argument line used when integration tests are run. -->
							<argLine>${failsafeArgLine}</argLine>

							<!-- Skips integration tests if the value of skip.integration.tests 
								property is true -->
							<skipTests>${skip.integration.tests}</skipTests>

						</configuration>
					</execution>
				</executions>
			</plugin>


		</plugins>

	</build>

	<!-- REPORTING -->
	<reporting>

		<outputDirectory>${basedir}/target/site</outputDirectory>

		<plugins>

			<!-- Checkstyle plugin -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>${plugin.maven.checkstyle}</version>
				<configuration>
					<configLocation>config/checkstyle/checkstyle.xml</configLocation>
					<suppressionsLocation>config/checkstyle/checkstyle-suppressions.xml</suppressionsLocation>
					<suppressionsFileExpression>checkstyle.suppressions.file</suppressionsFileExpression>
				</configuration>
			</plugin>

			<!-- Generates a report based on the results of unit tests. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-report-plugin</artifactId>
				<version>${plugin.maven.surefire}</version>
			</plugin>

		</plugins>

	</reporting>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-contract-dependencies</artifactId>
				<version>${spring.cloud.contract.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring.cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<!-- For non embedded deployments need to make scope provided for tomcat. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>com.github.tomakehurst</groupId>
			<artifactId>wiremock</artifactId>
		</dependency>


		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit-version}</version>
			<scope>test</scope>
		</dependency>


		<dependency>
			<groupId>io.rest-assured</groupId>
			<artifactId>rest-assured</artifactId>
			<version>${rest.assured.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>io.rest-assured</groupId>
			<artifactId>spring-mock-mvc</artifactId>
			<version>${rest.assured.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-contract-verifier</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-contract-wiremock</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-contract-stub-runner</artifactId>
			<scope>test</scope>
		</dependency>


	</dependencies>

</project>
